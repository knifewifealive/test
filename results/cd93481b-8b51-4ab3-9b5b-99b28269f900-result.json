{"name": "test_correct_url_on_regions_link", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=137.0.7151.120); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff61e95cda5+78885]\n\tGetHandleVerifier [0x0x7ff61e95ce00+78976]\n\t(No symbol) [0x0x7ff61e719bca]\n\t(No symbol) [0x0x7ff61e7215bd]\n\t(No symbol) [0x0x7ff61e724951]\n\t(No symbol) [0x0x7ff61e7c25ab]\n\t(No symbol) [0x0x7ff61e798b8a]\n\t(No symbol) [0x0x7ff61e7c122f]\n\t(No symbol) [0x0x7ff61e798963]\n\t(No symbol) [0x0x7ff61e7616b1]\n\t(No symbol) [0x0x7ff61e762443]\n\tGetHandleVerifier [0x0x7ff61ec34eed+3061101]\n\tGetHandleVerifier [0x0x7ff61ec2f33d+3037629]\n\tGetHandleVerifier [0x0x7ff61ec4e592+3165202]\n\tGetHandleVerifier [0x0x7ff61e97730e+186766]\n\tGetHandleVerifier [0x0x7ff61e97eb3f+217535]\n\tGetHandleVerifier [0x0x7ff61e9659b4+114740]\n\tGetHandleVerifier [0x0x7ff61e965b69+115177]\n\tGetHandleVerifier [0x0x7ff61e94c368+10728]\n\tBaseThreadInitThunk [0x0x7ffd13757374+20]\n\tRtlUserThreadStart [0x0x7ffd14adcc91+33]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"540ed542d65804028612811385d2cc1d\")>\n\n    @allure.feature('Tensor.ru page, tensor_block_get_more_info_link contains correct url')\n    @allure.story('Correct URL')\n    def test_correct_url_on_regions_link(browser):\n        tensor_page = TensorPage(browser)\n        tensor_page.open()\n>       url = tensor_page.tensor_block_get_more_info_link\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\test_first_scenario.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\tensor.py:30: in tensor_block_get_more_info_link\n    return self.find(get_more_info_link_selector).get_attribute('href')\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:233: in get_attribute\n    attribute_value = self.parent.execute_script(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:544: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F1161F9550>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...ff61e94c368+10728]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffd13757374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffd14adcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=137.0.7151.120); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff61e95cda5+78885]\nE       \tGetHandleVerifier [0x0x7ff61e95ce00+78976]\nE       \t(No symbol) [0x0x7ff61e719bca]\nE       \t(No symbol) [0x0x7ff61e7215bd]\nE       \t(No symbol) [0x0x7ff61e724951]\nE       \t(No symbol) [0x0x7ff61e7c25ab]\nE       \t(No symbol) [0x0x7ff61e798b8a]\nE       \t(No symbol) [0x0x7ff61e7c122f]\nE       \t(No symbol) [0x0x7ff61e798963]\nE       \t(No symbol) [0x0x7ff61e7616b1]\nE       \t(No symbol) [0x0x7ff61e762443]\nE       \tGetHandleVerifier [0x0x7ff61ec34eed+3061101]\nE       \tGetHandleVerifier [0x0x7ff61ec2f33d+3037629]\nE       \tGetHandleVerifier [0x0x7ff61ec4e592+3165202]\nE       \tGetHandleVerifier [0x0x7ff61e97730e+186766]\nE       \tGetHandleVerifier [0x0x7ff61e97eb3f+217535]\nE       \tGetHandleVerifier [0x0x7ff61e9659b4+114740]\nE       \tGetHandleVerifier [0x0x7ff61e965b69+115177]\nE       \tGetHandleVerifier [0x0x7ff61e94c368+10728]\nE       \tBaseThreadInitThunk [0x0x7ffd13757374+20]\nE       \tRtlUserThreadStart [0x0x7ffd14adcc91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "steps": [{"name": "Open page: https://tensor.ru/", "status": "passed", "start": 1750422978317, "stop": 1750422978812}], "start": 1750422978316, "stop": 1750422986593, "uuid": "31bf48d8-29c5-454b-89fc-b13e9119c4ec", "historyId": "fe2f36f392b394a4faae3a70d1516502", "testCaseId": "fe2f36f392b394a4faae3a70d1516502", "fullName": "tests.test_first_scenario#test_correct_url_on_regions_link", "labels": [{"name": "story", "value": "Correct URL"}, {"name": "feature", "value": "Tensor.ru page, tensor_block_get_more_info_link contains correct url"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_first_scenario"}, {"name": "host", "value": "DESKTOP-KHTU12F"}, {"name": "thread", "value": "3052-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_first_scenario"}]}